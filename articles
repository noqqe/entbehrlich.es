#!/usr/bin/env python3.4
# -*- coding: utf-8 -*-

import re
import os
import click
import nltk
import git
import urllib
from urllib.parse import urlparse
import requests
from subprocess import call
import wikipedia
from dateutil.parser import parse
import datetime
from twitter import *
import feedparser
import warnings
import subprocess

warnings.filterwarnings("ignore")

# Environment variables
project_home = os.path.expanduser("~/Code/entbehrlich.es")
posts_home = project_home + "/content/post/"
hugocmd = "/home/noqqe/.go/bin/hugo"
rsynccmd = "/usr/local/bin/rsync -avi --delete public/ aax:/var/www/htdocs/entbehrlich.es/"
feedurl = "https://entbehrlich.es/index.xml"
editor = "/usr/local/bin/vim"

# Twitter credentials
con_key = "aWoryvyvjQqV2aCDOyg6YJCJi"
con_secret = "A8JhSSKM0996vjKV8NwKi8dvR2ApCfuRb6M8rRav6ctojhQcRk"
access_token = "723558748581683201-QYcFL4pFqHxgflEjcxkeIE5BfMEI6JM"
access_token_secret = "Dd8oGmYhXpMfGcFF3HdsqKO8iD2q902uuHFs7cUZI3HbI"


# Little helpers
def gen_article_meta(title, date, tags):
    """
    Make a blog post header like
    ---
    title: foo
    date: bar
    draft: false
    tags:
    - foo
    - bar
    ---

    :title: str
    :date: str
    :tags: list
    :returns: str
    """
    head = "---\n"
    n = "\n"
    header = head + "title: " + title + n + "date: " + date + n + "draft: true" + n
    header = header + "tags: "
    for tag in tags:
        header = header + n + "- " + tag.replace("Kategorie:", '')
    header = header + n + head + n
    return header

def gen_article_quote(summary, title, url):
    """
    Takes the wiki summary and builds

    > lorem ipsum
    >
    > Quelle: [Lorem Impsum](https://...)

    :summary: str (wiki summary from wikilib)
    :title: str (generated title for the post being used as link text)
    :url: str (article url)
    :returns: str (full multiline quote)
    """

    # shortcut for newline
    n = '\n'

    # first sentence of the article and quote it for markdown
    if len(summary) >= 350:
        summary = nltk.tokenize.sent_tokenize(summary)[0]

    # start with a single quote for markdown
    summary = "> " + summary + n

    # add source and proper link to quote
    quote = summary + '>' + n + '> Quelle: ' + build_url(url=url, txt=title)

    return quote

def gen_article_thanks(thanks):
    """
    Takes a twitter username and adds a friendly thank
    you at the end of the post

    :thanks: str (twitter username)
    :returns: str
    """
    if thanks is not None:
        txt = "Danke an %s!" % build_url(url="https://twitter.com/" + thanks, txt=thanks)
    else:
        txt = ""

    return txt

def build(hugocmd):
    """
    Executes hugo to build the latest build of the blog

    :hugocmd: str (command and args)
    :returns: bool
    """
    print("BUILD BLOG\n")

    status, output = subprocess.getstatusoutput(hugocmd)
    print(output)

    if status == 0:
        return True
    else:
        return False

def deploy(rsynccmd):
    """
    Uses rsync to deploy the build to the serving http server

    \b
    :rsynccmd: str (command and args)
    :returns: bool
    """
    status, output = subprocess.getstatusoutput(rsynccmd)
    print(output)

    if status == 0:
        return True
    else:
        return False

def publish(post):
    """
    Pick draft post, update date and draft to false

    \b
    :post: str (filename of the post)
    :returns: bool
    """

    t = datetime.datetime.now()
    t = t.replace(microsecond=0)
    t = t.isoformat()
    path = posts_home + post

    try:
        open(path)
    except IOError:
        print("No such file")
        return False

    if 'draft: true' in open(path).read():
        # because FUCK YOU HARD FILEINPUT!
        subprocess.getstatusoutput('sed -i \'s#draft: true#draft: false#\' %s' % path)
        subprocess.getstatusoutput('sed -i \'s#^date: .*#date: %s#\' %s' % (t, path))

    return True

def commit(post):
    """
    Commit a file in git
    :post: str (filename of the post)
    :returns: bool
    """

    try:
        repo = git.Repo(project_home)
        repo.git.add(posts_home + post)
        repo.git.commit(m=post)
        print("Post %s committed" % post)
        return True
    except:
        print("Post %s could not be committed" % post)
        return False


def tweet(feedurl):
    """
    Tweet latest blogpost from rss feed
    :feedurl: str (http uri)
    :returns: bool
    """

    feed = feedparser.parse(feedurl)
    title = feed['entries'][0]['title']
    link = feed['entries'][0]['link']

    message = title + " " + link

    auth = OAuth(
        consumer_key=con_key,
        consumer_secret=con_secret,
        token=access_token,
        token_secret=access_token_secret,
	)

    try:
        t = Twitter(auth=auth)
        t.statuses.update(status=message)
        print("Tweeted \"%s\"" % message)
        return True
    except:
        print("Could not send tweet. Check debugging")
        return False

def build_url(url, txt=None):
    """
    Build url for blogpost with urlencoding
    like this [http://foo.bar/baz](http://foo.bar.baz)
    :url: str (link target)
    :txt: str (link text)
    :returns: str
    """

    if txt is not None:
        mdurl = '[' + txt + ']'
    else:
        cont = url.replace("https://", "")
        cont = url.replace("http://", "")
        mdurl = '[' + cont + ']'

    mdurl = mdurl + '(' + url + ')'

    return mdurl

# CLI Commands

@click.group()
def cli():
    pass

@cli.command(short_help="Create a new post")
@click.argument('url')
@click.option('date', '-d', '--date', default=str(datetime.datetime.now()))
@click.option('thanks', '-t', '--thanks', default=None)
def new(url, date, thanks):
    """
    \b
    Create new post.
    Fetches content from wikipedia url
    Creates article header
    Creates quote from article with reference
    Adds thank you at the end of the article

    \b
    :url: str (link to article)
    :date: datetime.datetime (when to release it)
    :thanks: str (twitter username)
    """

    # needed in further building of article
    origurl = url

    # newline shortcut
    n = "\n"

    # find wikipedia link
    url = urlparse(url)
    lang = url.netloc.split('.')[0]
    title = url.path.split('/')[2].replace('-',' ').replace('_',' ')
    filename = title.replace(' ','-').replace('---','-').replace(')','').replace('(','') + '.md'

    # set lang and title, fetch wikipedia article
    try:
        wikipedia.set_lang(lang)
        wiki = wikipedia.page(title)
        tags = wiki.categories
        summary = wiki.summary
    except wikipedia.exceptions.DisambiguationError as e:
        print(e)
        return False

    t = parse(date)
    t = t.replace(hour=14, minute=0, microsecond=0)
    t = t.isoformat()


    # generate header for article
    header = gen_article_meta(title=title, date=t, tags=tags)

    # generate quote for article
    quote = gen_article_quote(summary=summary, title=title, url=origurl)

    # generate thank you section for posted article
    thanks = gen_article_thanks(thanks)

    # put all the content together
    text = \
        header + \
        n + n + \
        quote + \
        n + n + \
        thanks

    # write markdown to the document
    path = posts_home + filename
    with open(path, "w") as f:
        f.write(text)
        f.close()

    print("Created Post: " + path)

    # edit file
    call([editor, path])

    # commit to local repo
    commit(filename)

    return True

@cli.command(short_help="Show current drafts")
@click.option('all', '--all', '-a',  is_flag=True)
def queue(all):
    """
    \b
    Show all posts available
    :all: bool
    :returns: bool
    """

    posts = os.listdir(posts_home)
    for post in posts:
        if not all:
            if 'draft: true' in open(posts_home + post).read():
                print(post)
        else:
            print(post)

    return True

@cli.command(short_help="Publish a post")
@click.argument('post')
def release(post):
    """
    \b
    Releases a post to the website
    * removes draft status from post
    * commit post in git
    * build hugo
    * deploy to webserver
    * tweet about it

    \b
    :post: str (filename to release)
    :returns: bool
    """

    # remove draft
    publish(post)

    # commit git changes
    commit(post)

    # build blog
    build(hugocmd)

    # deploy to server
    deploy(rsynccmd)

    # tweet the new post
    tweet(feedurl)

    return True

@cli.command(short_help="Build and deploy to entbehrlich.es")
def redeploy():
    """
    \b
    Redeploy means that no new content will be published.
    The blog will be build and rsynced to the server
    :returns: bool
    """

    # build blog
    build(hugocmd)

    # build deploy to server
    deploy(rsynccmd)

    return True

@cli.command()
def inspiration(short_help="Get 20 recently update articles from Wikipedia"):
    """
    \b
    Lookup some new/recently edited articles as inspirations.
    :returns: bool
    """
    wiki_changes_api = 'https://de.wikipedia.org/w/api.php?action=query&list=recentchanges&format=json&rctype=edit|new&rclimit=20'
    r = requests.get(wiki_changes_api)
    r = r.json()
    for edit in r["query"]["recentchanges"]:
        title = edit["title"]
        if "Benutzer:" in title or "Diskussion:" in title or "Wikipedia:" in title:
            continue
        print(title + " -- https://de.wikipedia.org/wiki/?curid=" + str(edit["pageid"]))

    return True

@cli.command(short_help="Get 20 random articles from Wikipedia")
def random():
    """
    \b
    Get some random articles from wikipedia
    :returns: bool
    """
    wikipedia.set_lang("de")
    for w in wikipedia.random(20):
        try:
            page = wikipedia.page(w)
            print(page.title + " -- " + page.url)
        except (wikipedia.exceptions.DisambiguationError, wikipedia.exceptions.PageError):
            pass

    return True

# Call wrapper to cli commands
if __name__ == '__main__':
    cli()
