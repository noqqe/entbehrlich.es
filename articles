#!/usr/bin/env python
# -*- coding: utf-8 -*-

import re
import os
import click
import nltk
import urlparse
import commands
from subprocess import call
import wikipedia
from dateutil.parser import parse
import datetime
from twitter import *
import feedparser
import warnings

warnings.filterwarnings("ignore")

# Environment variables
posts_home = os.path.expanduser("~/Code/entbehrlich.es/content/post/")
hugo = "/home/noqqe/.go/bin/hugo"
rsync = "/usr/local/bin/rsync -avi --delete public/ aax:/var/www/htdocs/entbehrlich.es/"
feedurl = "https://entbehrlich.es/index.xml"
editor = "/usr/local/bin/vim"

# Twitter credentials
con_key = "aWoryvyvjQqV2aCDOyg6YJCJi"
con_secret = "A8JhSSKM0996vjKV8NwKi8dvR2ApCfuRb6M8rRav6ctojhQcRk"
access_token = "723558748581683201-QYcFL4pFqHxgflEjcxkeIE5BfMEI6JM"
access_token_secret = "Dd8oGmYhXpMfGcFF3HdsqKO8iD2q902uuHFs7cUZI3HbI"

@click.group()
def cli():
    pass

@cli.command()
@click.argument('url')
@click.option('publish', '-d', '--date', default=str(datetime.datetime.now()))
def new(url, publish):
    " Create new post and fetch content from wikipedia "

    origurl = url

    # find wikipedia link
    url = urlparse.urlparse(url)
    lang = url.netloc.split('.')[0]
    title = url.path.split('/')[2].replace('-',' ').replace('_',' ')
    filename = title.replace(' ','-').replace('---','-') + '.md'

    # set lang and title, fetch wikipedia article
    try:
        wikipedia.set_lang(lang)
        wiki = wikipedia.summary(title)
    except wikipedia.exceptions.DisambiguationError as e:
        print(e)
        return False

    t = parse(publish)
    t = t.replace(hour=14, minute=0, microsecond=0)
    t = t.isoformat()

    # first sentence of the article and quote it for markdown
    if len(wiki) >= 350:
        wiki = nltk.tokenize.sent_tokenize(wiki)[0]
    wiki = "> " + wiki

    # generate markdown document
    head = "---\n"
    n = "\n"
    header = head + "title: " + title + n + "date: " + t + n + "draft: true" + n + head + n
    text = header + n + origurl + n + n + wiki

    # write markdown to the document
    path = posts_home + filename
    with open(path, "w") as f:
        f.write(text.encode("utf-8"))
        f.close()

    print("Created Post: " + path)

    # edit file
    call([editor, path])

    return True


@cli.command()
@click.option('all', '--all', '-a',  is_flag=True)
def queue(all):
    " Show all drafts "

    posts = os.listdir(posts_home)
    for post in posts:
        if not all:
            if 'draft: true' in open(posts_home + post).read():
                print post
        else:
            print post


@cli.command()
@click.argument('post')
def release(post):
    " Pick draft post, update date and draft to false "

    t = datetime.datetime.now()
    t = t.replace(microsecond=0)
    t = t.isoformat()
    path = posts_home + post

    try:
        open(path)
    except IOError:
        print("No such file")
        return False

    if 'draft: true' in open(path).read():
        # because FUCK YOU HARD FILEINPUT!
        commands.getstatusoutput('sed -i \'s#draft: true#draft: false#\' %s' % path)
        commands.getstatusoutput('sed -i \'s#^date: .*#date: %s#\' %s' % (t, path))

@cli.command()
def deploy():
    " Deploy blog to server "
    status, output = commands.getstatusoutput(hugo)
    print("BUILD BLOG\n")
    print output
    if status == 0:
        status, output = commands.getstatusoutput(rsync)
        print("\nDEPLOY BLOG TO SERVER\n")
        print output
        if status != 0:
            print("Error: rsync failed")
    else:
        print("Error: Hugo returned an error")

@cli.command()
def tweet():
    " Tweet latest blogpost from rss feed "

    feed = feedparser.parse(feedurl)
    title = feed['entries'][0]['title']
    link = feed['entries'][0]['link']

    message = title + " " + link

    auth = OAuth(
        consumer_key=con_key,
        consumer_secret=con_secret,
        token=access_token,
        token_secret=access_token_secret,
	)
    t = Twitter(auth=auth)
    t.statuses.update(status=message)
    print("Tweeted \"%s\"" % message)


if __name__ == '__main__':
    cli()
